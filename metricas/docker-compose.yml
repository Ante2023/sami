# version: '3.8'

#Para persistir datos de los servicios de contenedores "grafana (save dashboard add o creados) y prometheus(save métricas raspadas)"
volumes:
  prometheus-data:
  
networks:
  monitoring:
    driver: bridge

services:
  app:
    container_name: api-python
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - 5000:5000
    environment:
      - PYTHONUNBUFFERED=1
    depends_on:
      - prometheus
    networks:
    - monitoring

  prometheus:
    # image: prom/prometheus:v2.28.1
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    #Espejar, de host-anfotrion a filesystem del contenedor
    volumes:
    - ./prometheus.yml:/etc/prometheus/prometheus.yml
    - prometheus-data:/prometheus
    ports:
    - 9090:9090
    extra_hosts:
    - "host.docker.internal:host-gateway"
    networks:
    - monitoring
    command:
    - '--config.file=/etc/prometheus/prometheus.yml'
    - '--storage.tsdb.path=/prometheus'
    - '--storage.tsdb.retention.time=1y' # guarda la info de por 1 año
    - '--web.enable-lifecycle'

  # cadvisor:
  #     image: gcr.io/cadvisor/cadvisor:latest
  #     container_name: cadvisor
  #     restart: unless-stopped
  #     expose: # Uso esta opción porque para este ejemplo no necesito exponer mi puerto a , que no sea accesible desde fuera de mi máquina
  #     - 8080  # un puerto dentro del contenedor que escuchará otros puerto en la red interna del contenedor
  #             # ports: # Si quisiera consultar desde el host-anfotrión a este servicio, usaría esta opcion
  #             # - 8080:8080 # conecto mi servicio en el puesto 8080 del contenedor, con el puerto 8080 del host-anfitrion (para consultarlo via browser-web o curl)
  #     networks:
  #     - monitoring
  #   #Espejo contenedor-hostAnfotrión
  #     volumes:
  #     - /:/rootfs:ro
  #     - /var/run:/var/run:rw
  #     - /sys:/sys:ro
  #     - /var/lib/docker/:/var/lib/docker:ro


